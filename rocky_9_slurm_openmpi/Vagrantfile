# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

#Define the list of machines
slurm_cluster = {
    :controller => {
        :hostname => "controller",
        :ipaddress => "192.168.0.100"
    },
    :server1 => {
        :hostname => "server1",
        :ipaddress => "192.168.0.101"
    },
    :server2 => {
        :hostname => "server2",
        :ipaddress => "192.168.0.102"
    },
}

$script = <<-SCRIPT
  set -x
  if [[ ! -e /etc/.provisioned ]]; then
    rm /etc/hosts
    echo "192.168.0.100    controller" >> /etc/hosts
    echo "192.168.0.101    server1" >> /etc/hosts
    echo "192.168.0.102    server2" >> /etc/hosts

    #dnf -y update
    dnf install -y dnf-plugins-core
    #dnf config-manager --set-enabled powertools
    dnf config-manager --enable crb
    dnf groupinstall -y 'Development Tools'
    dnf install -y wget git bash hostname gcc gcc-gfortran gcc-c++ make file autoconf automake libtool zlib-devel python3-devel
    dnf install -y libmnl lsof numactl-libs ethtool tcl tk
 
    ## Packages required for OpenMPI and PMIx
    dnf install -y libnl3 libnl3-devel
    dnf install -y libevent libevent-devel
    dnf install -y munge munge-devel
#    dnf install -y rdma-core-devel
#    dnf install -y hwloc-devel
#    dnf install -y libibverbs-devel    
      
   
    # install openmpi
    dnf install -y openmpi openmpi-devel 
    #echo "export PATH=$PATH:/usr/lib64/openmpi/bin" >> /home/vagrant/.bashrc
    #echo "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib64/openmpi/lib" >> /home/vagrant/.bashrc
    cp /usr/lib64/openmpi/lib/* /usr/lib64
    cp /usr/lib64/openmpi/bin/* /usr/bin

    # we only generate the key on one of the nodes
    if [[ ! -e /vagrant/id_rsa ]]; then
      ssh-keygen -t rsa -f /vagrant/id_rsa -N ""
    fi
    install -m 600 -o vagrant -g vagrant /vagrant/id_rsa /home/vagrant/.ssh/
    # the extra 'echo' is needed because Vagrant inserts its own key without a
    # newline at the end
    (echo; cat /vagrant/id_rsa.pub) >> /home/vagrant/.ssh/authorized_keys

    # we only generate the munge key once
    if [[ ! -e /vagrant/munge.key ]]; then
      /usr/sbin/create-munge-key
      cp /etc/munge/munge.key /vagrant
    fi
    cp /vagrant/munge.key /etc/munge
    chown munge /etc/munge/munge.key
    chmod g-w /var/log
    chmod g-w /var/log/munge
    sudo systemctl restart munge

    # install packages required by slurm
    dnf install -y mariadb-server mariadb-devel
    dnf install -y pam-devel perl readline-devel

    # install slurm  
    export VERSION=21.08.8-2
    mkdir -p /home/vagrant/slurm 
    cd /home/vagrant/slurm
    wget https://download.schedmd.com/slurm/slurm-$VERSION.tar.bz2    
    rpmbuild -v -ta  --define "_lto_cflags %{nil}" slurm-$VERSION.tar.bz2
    cd /root/rpmbuild/RPMS/x86_64/
    dnf --nogpgcheck localinstall slurm-* -y

    #rmdir /home/vagrant/slurm
    #rmdir /root/rpmbuild    

    touch /etc/.provisioned
  fi
  # SLURM configurations  
  cp /vagrant/slurm.conf.21 /etc/slurm/slurm.conf
  cp /etc/slurm/cgroup.conf.example /etc/slurm/cgroup.conf
SCRIPT

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  config.vm.box = "rockylinux/9"
  # use a minimal amount of RAM for each node to avoid overwhelming the host
  config.vm.provider "virtualbox" do |v|
    v.memory = 256
    v.cpus = 1
  end
  config.vm.network "private_network", type: "dhcp"

  slurm_cluster.each_pair do |name, options|
    config.vm.define vm_name = name do |config|
      #config.vm.hostname = vm_name
      config.vm.hostname = "#{vm_name}"
      ip = options[:ipaddress]
      config.vm.network "private_network",
        ip: ip,
        virtualbox__intnet: "clusternet"
    end
  end

  config.vm.synced_folder ".", "/vagrant", type: "nfs", mount_options: ['rw', 'tcp', 'fsc', 'actimeo=1'] 
  config.vm.provision "shell", inline: $script

end
